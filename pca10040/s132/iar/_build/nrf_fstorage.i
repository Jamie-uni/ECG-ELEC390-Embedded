#line 1 "C:\\nRF5_SDK_14.2.0_17b948a\\components\\libraries\\fstorage\\nrf_fstorage.c"






































 
#line 1 "C:\\nRF5_SDK_14.2.0_17b948a\\examples\\ble_peripheral\\ble_app_hrs\\pca10040\\s132\\iar\\..\\config\\sdk_config.h"






































 













 












 






 






 



























 






 























 
















 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 















 






 













































































 

















 











 















 
























 







 









 























 











 








 









 








 










 














 


















 
















 
























































 








 








 








 









 









 

























 















 























 























 









 














 






 























 








 








 









 


















 











 
















 








 










 







































 














 













 










 








 
















 






 






 



















 





















 














 








































 








 






 






 























 











 






























 






 
















 






 






 


















 










 















 






 























 
















 










 






















 






 






 






 




















 
















 













 














 













 













 








 




















 
















 








 










 
















 






 






 






 






 























 









 









 
















 






 






 








 















 









 






 






 





















 













 








 



















 








 








 






















 
















 






 











 















 
















 















 

















 
























 






 











 






 













 












 


























 






 






 









 










 











 









 






 






 






 






 






 






 






 






 






 






 
























 



















 







































 


































 











































 






















 










































 






 


















































































































 











 















 

















 
































 






 






 




















































































 













































 


















 









































 






















 






 






 















 






 






 






 






 









 











 











 




























 






 






 






 










































 















































 















 















 

















 











 








 

















 









 








 






 













































 











 















 






















 











 















 






















 











 















 




























 











 















 






















 











 















 






















 











 















 






















 











 















 






















 











 















 






















 











 















 






















 











 















 






















 











 















 






















 











 















 






















 











 















 






















 











 















 















 













 











 















 






















 











 















 






















 











 















 






















 











 















 






















 











 















 






















 











 















 






















 











 















 






















 











 















 






















 











 















 






















 











 















 






















 











 















 




























 











 















 






















 











 















 






















 











 















 






















 











 















 






















 











 















 






















 











 















 






















 











 















 






















 











 















 






















 











 















 






















 











 















 






















 











 















 






















 











 















 


























































 




































































 
























































































































































































































































































































 



















 






















 












































































































































































#line 41 "C:\\nRF5_SDK_14.2.0_17b948a\\components\\libraries\\fstorage\\nrf_fstorage.c"



#line 1 "C:\\nRF5_SDK_14.2.0_17b948a\\components\\libraries\\fstorage\\nrf_fstorage.h"






































 

















 

#line 1 "C:\\Program Files (x86)\\IAR Systems\\Embedded Workbench 8.0\\arm\\inc\\c\\stdint.h"
 
 




  #pragma system_include


#line 1 "C:\\Program Files (x86)\\IAR Systems\\Embedded Workbench 8.0\\arm\\inc\\c\\ycheck.h"
 
 

 


  #pragma system_include















 





#line 11 "C:\\Program Files (x86)\\IAR Systems\\Embedded Workbench 8.0\\arm\\inc\\c\\stdint.h"
#line 1 "C:\\Program Files (x86)\\IAR Systems\\Embedded Workbench 8.0\\arm\\inc\\c\\yvals.h"
 
 





  #pragma system_include


 









  


 


 




 
#pragma rtmodel = "__dlib_version", "6"

 





 
#line 1 "C:\\Program Files (x86)\\IAR Systems\\Embedded Workbench 8.0\\arm\\inc\\c\\DLib_Defaults.h"



























 





  #pragma system_include


 
#line 1 "C:\\\\Program Files (x86)\\\\IAR Systems\\\\Embedded Workbench 8.0\\\\arm\\\\INC\\\\c\\\\DLib_Config_Full.h"
 
 





  #pragma system_include


 


 


 


 


#line 40 "C:\\Program Files (x86)\\IAR Systems\\Embedded Workbench 8.0\\arm\\inc\\c\\DLib_Defaults.h"
   
#line 47 "C:\\Program Files (x86)\\IAR Systems\\Embedded Workbench 8.0\\arm\\inc\\c\\DLib_Defaults.h"

 
#line 1 "C:\\Program Files (x86)\\IAR Systems\\Embedded Workbench 8.0\\arm\\inc\\c\\DLib_Product.h"
 





   #pragma system_include







 




 



 



 


 









 


 


 






 




 




 


 


 


 
#line 102 "C:\\Program Files (x86)\\IAR Systems\\Embedded Workbench 8.0\\arm\\inc\\c\\DLib_Product.h"









#line 51 "C:\\Program Files (x86)\\IAR Systems\\Embedded Workbench 8.0\\arm\\inc\\c\\DLib_Defaults.h"











 



















 














 


























 








 






 

#line 153 "C:\\Program Files (x86)\\IAR Systems\\Embedded Workbench 8.0\\arm\\inc\\c\\DLib_Defaults.h"









 

#line 172 "C:\\Program Files (x86)\\IAR Systems\\Embedded Workbench 8.0\\arm\\inc\\c\\DLib_Defaults.h"













 
















 








 
#line 223 "C:\\Program Files (x86)\\IAR Systems\\Embedded Workbench 8.0\\arm\\inc\\c\\DLib_Defaults.h"













 
















 





















 














 








 
#line 311 "C:\\Program Files (x86)\\IAR Systems\\Embedded Workbench 8.0\\arm\\inc\\c\\DLib_Defaults.h"








 
#line 331 "C:\\Program Files (x86)\\IAR Systems\\Embedded Workbench 8.0\\arm\\inc\\c\\DLib_Defaults.h"






 








 















 








 
















 




#line 400 "C:\\Program Files (x86)\\IAR Systems\\Embedded Workbench 8.0\\arm\\inc\\c\\DLib_Defaults.h"





 

#line 414 "C:\\Program Files (x86)\\IAR Systems\\Embedded Workbench 8.0\\arm\\inc\\c\\DLib_Defaults.h"


   
#line 424 "C:\\Program Files (x86)\\IAR Systems\\Embedded Workbench 8.0\\arm\\inc\\c\\DLib_Defaults.h"

#line 432 "C:\\Program Files (x86)\\IAR Systems\\Embedded Workbench 8.0\\arm\\inc\\c\\DLib_Defaults.h"

  







 









 









 







 







 
















 


   
#line 504 "C:\\Program Files (x86)\\IAR Systems\\Embedded Workbench 8.0\\arm\\inc\\c\\DLib_Defaults.h"




 










 

#line 528 "C:\\Program Files (x86)\\IAR Systems\\Embedded Workbench 8.0\\arm\\inc\\c\\DLib_Defaults.h"






 










 













 

#line 570 "C:\\Program Files (x86)\\IAR Systems\\Embedded Workbench 8.0\\arm\\inc\\c\\DLib_Defaults.h"



 








#line 43 "C:\\Program Files (x86)\\IAR Systems\\Embedded Workbench 8.0\\arm\\inc\\c\\yvals.h"



















 

#line 83 "C:\\Program Files (x86)\\IAR Systems\\Embedded Workbench 8.0\\arm\\inc\\c\\yvals.h"

 







 
#line 102 "C:\\Program Files (x86)\\IAR Systems\\Embedded Workbench 8.0\\arm\\inc\\c\\yvals.h"














 


   
#line 128 "C:\\Program Files (x86)\\IAR Systems\\Embedded Workbench 8.0\\arm\\inc\\c\\yvals.h"





 
#line 141 "C:\\Program Files (x86)\\IAR Systems\\Embedded Workbench 8.0\\arm\\inc\\c\\yvals.h"










 
#line 196 "C:\\Program Files (x86)\\IAR Systems\\Embedded Workbench 8.0\\arm\\inc\\c\\yvals.h"

#line 204 "C:\\Program Files (x86)\\IAR Systems\\Embedded Workbench 8.0\\arm\\inc\\c\\yvals.h"

#line 211 "C:\\Program Files (x86)\\IAR Systems\\Embedded Workbench 8.0\\arm\\inc\\c\\yvals.h"

 


 




 
#line 232 "C:\\Program Files (x86)\\IAR Systems\\Embedded Workbench 8.0\\arm\\inc\\c\\yvals.h"
  typedef unsigned long int _Wchart;

    typedef unsigned long int _Wintt;
#line 253 "C:\\Program Files (x86)\\IAR Systems\\Embedded Workbench 8.0\\arm\\inc\\c\\yvals.h"

 


 
typedef unsigned int     _Sizet;

 
typedef struct _Mbstatet
{  

    unsigned int _Wchar;   
    unsigned int _State;   
#line 273 "C:\\Program Files (x86)\\IAR Systems\\Embedded Workbench 8.0\\arm\\inc\\c\\yvals.h"

#line 297 "C:\\Program Files (x86)\\IAR Systems\\Embedded Workbench 8.0\\arm\\inc\\c\\yvals.h"
} _Mbstatet;






 


 





  typedef struct __va_list
  {
    char  *_Ap;
  } __va_list;
  typedef __va_list __Va_list;












    typedef struct __FILE _Filet;



 
typedef struct
{       

    long long _Off;     



  _Mbstatet _Wstate;
} _Fpost;





 


 

  
    
  _Pragma("object_attribute = __weak") __intrinsic __nounwind void __iar_Locksyslock_Malloc(void);
  _Pragma("object_attribute = __weak") __intrinsic __nounwind void __iar_Locksyslock_Stream(void);
  _Pragma("object_attribute = __weak") __intrinsic __nounwind void __iar_Locksyslock_Debug(void);
  _Pragma("object_attribute = __weak") __intrinsic __nounwind void __iar_Locksyslock_StaticGuard(void);
  _Pragma("object_attribute = __weak") __intrinsic __nounwind void __iar_Unlocksyslock_Malloc(void);
  _Pragma("object_attribute = __weak") __intrinsic __nounwind void __iar_Unlocksyslock_Stream(void);
  _Pragma("object_attribute = __weak") __intrinsic __nounwind void __iar_Unlocksyslock_Debug(void);
  _Pragma("object_attribute = __weak") __intrinsic __nounwind void __iar_Unlocksyslock_StaticGuard(void);



      _Pragma("object_attribute = __weak") __intrinsic __nounwind void __iar_Lockfilelock(_Filet *);
      _Pragma("object_attribute = __weak") __intrinsic __nounwind void __iar_Unlockfilelock(_Filet *);



  typedef void *__iar_Rmtx;

  _Pragma("object_attribute = __weak") __intrinsic __nounwind void __iar_Initdynamiclock(__iar_Rmtx *);
  _Pragma("object_attribute = __weak") __intrinsic __nounwind void __iar_Dstdynamiclock(__iar_Rmtx *);
  _Pragma("object_attribute = __weak") __intrinsic __nounwind void __iar_Lockdynamiclock(__iar_Rmtx *);
  _Pragma("object_attribute = __weak") __intrinsic __nounwind void __iar_Unlockdynamiclock(__iar_Rmtx *);

  
#line 404 "C:\\Program Files (x86)\\IAR Systems\\Embedded Workbench 8.0\\arm\\inc\\c\\yvals.h"

#line 444 "C:\\Program Files (x86)\\IAR Systems\\Embedded Workbench 8.0\\arm\\inc\\c\\yvals.h"






 
#line 12 "C:\\Program Files (x86)\\IAR Systems\\Embedded Workbench 8.0\\arm\\inc\\c\\stdint.h"





 

  typedef signed char          int8_t;
  typedef unsigned char        uint8_t;



  typedef signed short int         int16_t;
  typedef unsigned short int       uint16_t;



  typedef signed int         int32_t;
  typedef unsigned int       uint32_t;



  typedef signed long long int         int64_t;
  typedef unsigned long long int       uint64_t;



 
typedef signed char      int_least8_t;
typedef unsigned char    uint_least8_t;

typedef signed short int     int_least16_t;
typedef unsigned short int   uint_least16_t;

typedef signed int     int_least32_t;
typedef unsigned int   uint_least32_t;

 

  typedef signed long long int   int_least64_t;


  typedef unsigned long long int uint_least64_t;




 
typedef signed int       int_fast8_t;
typedef unsigned int     uint_fast8_t;

typedef signed int      int_fast16_t;
typedef unsigned int    uint_fast16_t;

typedef signed int      int_fast32_t;
typedef unsigned int    uint_fast32_t;


  typedef signed long long int    int_fast64_t;


  typedef unsigned long long int  uint_fast64_t;


 
typedef signed long long int          intmax_t;
typedef unsigned long long int        uintmax_t;


 
typedef signed int          intptr_t;
typedef unsigned int        uintptr_t;

 



typedef int __data_intptr_t; typedef unsigned int __data_uintptr_t;


 

























































































 



































 
#line 60 "C:\\nRF5_SDK_14.2.0_17b948a\\components\\libraries\\fstorage\\nrf_fstorage.h"
#line 1 "C:\\Program Files (x86)\\IAR Systems\\Embedded Workbench 8.0\\arm\\inc\\c\\stdbool.h"
 
 





  #pragma system_include
















 
#line 61 "C:\\nRF5_SDK_14.2.0_17b948a\\components\\libraries\\fstorage\\nrf_fstorage.h"
#line 1 "C:\\nRF5_SDK_14.2.0_17b948a\\examples\\ble_peripheral\\ble_app_hrs\\pca10040\\s132\\iar\\..\\..\\..\\..\\..\\..\\components\\libraries\\util\\sdk_errors.h"






































 



























 




#line 1 "C:\\nRF5_SDK_14.2.0_17b948a\\examples\\ble_peripheral\\ble_app_hrs\\pca10040\\s132\\iar\\..\\..\\..\\..\\..\\..\\components\\softdevice\\s132\\headers\\nrf_error.h"




































 

 




 

 








 




 

#line 82 "C:\\nRF5_SDK_14.2.0_17b948a\\examples\\ble_peripheral\\ble_app_hrs\\pca10040\\s132\\iar\\..\\..\\..\\..\\..\\..\\components\\softdevice\\s132\\headers\\nrf_error.h"








 
#line 74 "C:\\nRF5_SDK_14.2.0_17b948a\\examples\\ble_peripheral\\ble_app_hrs\\pca10040\\s132\\iar\\..\\..\\..\\..\\..\\..\\components\\libraries\\util\\sdk_errors.h"









 


 




 




 





 


 





 
#line 121 "C:\\nRF5_SDK_14.2.0_17b948a\\examples\\ble_peripheral\\ble_app_hrs\\pca10040\\s132\\iar\\..\\..\\..\\..\\..\\..\\components\\libraries\\util\\sdk_errors.h"
 





 



 






 




 












 
typedef uint32_t ret_code_t;

 
 





#line 62 "C:\\nRF5_SDK_14.2.0_17b948a\\components\\libraries\\fstorage\\nrf_fstorage.h"
#line 1 "C:\\nRF5_SDK_14.2.0_17b948a\\examples\\ble_peripheral\\ble_app_hrs\\pca10040\\s132\\iar\\..\\..\\..\\..\\..\\..\\components\\libraries\\experimental_section_vars\\nrf_section.h"






































 



#line 1 "C:\\nRF5_SDK_14.2.0_17b948a\\examples\\ble_peripheral\\ble_app_hrs\\pca10040\\s132\\iar\\..\\..\\..\\..\\..\\..\\components\\libraries\\util\\nordic_common.h"






































 


 































 




 


 


 


 


 
   

 
   















 

 
















 

 




 



 






 







 










 


#line 202 "C:\\nRF5_SDK_14.2.0_17b948a\\examples\\ble_peripheral\\ble_app_hrs\\pca10040\\s132\\iar\\..\\..\\..\\..\\..\\..\\components\\libraries\\util\\nordic_common.h"









#line 44 "C:\\nRF5_SDK_14.2.0_17b948a\\examples\\ble_peripheral\\ble_app_hrs\\pca10040\\s132\\iar\\..\\..\\..\\..\\..\\..\\components\\libraries\\experimental_section_vars\\nrf_section.h"











 





#pragma language=extended






 
#line 78 "C:\\nRF5_SDK_14.2.0_17b948a\\examples\\ble_peripheral\\ble_app_hrs\\pca10040\\s132\\iar\\..\\..\\..\\..\\..\\..\\components\\libraries\\experimental_section_vars\\nrf_section.h"






 
#line 94 "C:\\nRF5_SDK_14.2.0_17b948a\\examples\\ble_peripheral\\ble_app_hrs\\pca10040\\s132\\iar\\..\\..\\..\\..\\..\\..\\components\\libraries\\experimental_section_vars\\nrf_section.h"






 












 
#line 127 "C:\\nRF5_SDK_14.2.0_17b948a\\examples\\ble_peripheral\\ble_app_hrs\\pca10040\\s132\\iar\\..\\..\\..\\..\\..\\..\\components\\libraries\\experimental_section_vars\\nrf_section.h"















 
#line 155 "C:\\nRF5_SDK_14.2.0_17b948a\\examples\\ble_peripheral\\ble_app_hrs\\pca10040\\s132\\iar\\..\\..\\..\\..\\..\\..\\components\\libraries\\experimental_section_vars\\nrf_section.h"














 









 



 







#line 63 "C:\\nRF5_SDK_14.2.0_17b948a\\components\\libraries\\fstorage\\nrf_fstorage.h"














 


 


 



 
typedef enum
{
    NRF_FSTORAGE_EVT_READ_RESULT,
    NRF_FSTORAGE_EVT_WRITE_RESULT,  
    NRF_FSTORAGE_EVT_ERASE_RESULT   
} nrf_fstorage_evt_id_t;


 
typedef struct
{
    nrf_fstorage_evt_id_t   id;         
    ret_code_t              result;     
    uint32_t                addr;       
    uint32_t                len;        
    void                  * p_param;    
} nrf_fstorage_evt_t;





 
typedef void (*nrf_fstorage_evt_handler_t)(nrf_fstorage_evt_t * p_evt);


 
typedef struct
{
    uint32_t erase_unit;        
    uint32_t program_unit;      
    _Bool     rmap;              
    _Bool     wmap;              
} const nrf_fstorage_info_t;


 
struct nrf_fstorage_api_s;








 
typedef struct
{
     
    struct nrf_fstorage_api_s const * p_api;

     
    nrf_fstorage_info_t * p_flash_info;

    


 
    nrf_fstorage_evt_handler_t evt_handler;

    




 
    uint32_t start_addr;

    




 
    uint32_t end_addr;
} nrf_fstorage_t;


 
typedef struct nrf_fstorage_api_s
{
     
    ret_code_t (*init)(nrf_fstorage_t * p_fs, void * p_param);
     
    ret_code_t (*uninit)(nrf_fstorage_t * p_fs, void * p_param);
     
    ret_code_t (*read)(nrf_fstorage_t const * p_fs, uint32_t src, void * p_dest, uint32_t len);
     
    ret_code_t (*write)(nrf_fstorage_t const * p_fs, uint32_t dest, void const * p_src, uint32_t len, void * p_param);
     
    ret_code_t (*erase)(nrf_fstorage_t const * p_fs, uint32_t addr, uint32_t len, void * p_param);
     
    uint8_t const * (*rmap)(nrf_fstorage_t const * p_fs, uint32_t addr);
     
    uint8_t * (*wmap)(nrf_fstorage_t const * p_fs, uint32_t addr);
     
    _Bool (*is_busy)(nrf_fstorage_t const * p_fs);
} const nrf_fstorage_api_t;











 
ret_code_t nrf_fstorage_init(nrf_fstorage_t     * p_fs,
                             nrf_fstorage_api_t * p_api,
                             void               * p_param);











 
ret_code_t nrf_fstorage_uninit(nrf_fstorage_t * p_fs, void * p_param);

















 
ret_code_t nrf_fstorage_read(nrf_fstorage_t const * p_fs,
                             uint32_t               addr,
                             void                 * p_dest,
                             uint32_t               len);





























 
ret_code_t nrf_fstorage_write(nrf_fstorage_t const * p_fs,
                              uint32_t               dest,
                              void           const * p_src,
                              uint32_t               len,
                              void                 * p_param);





















 
ret_code_t nrf_fstorage_erase(nrf_fstorage_t const * p_fs,
                              uint32_t               page_addr,
                              uint32_t               len,
                              void                 * p_param);









 
uint8_t const * nrf_fstorage_rmap(nrf_fstorage_t const * p_fs, uint32_t addr);









 
uint8_t * nrf_fstorage_wmap(nrf_fstorage_t const * p_fs, uint32_t addr);










 
 _Bool nrf_fstorage_is_busy(nrf_fstorage_t const * p_fs);

 






#line 45 "C:\\nRF5_SDK_14.2.0_17b948a\\components\\libraries\\fstorage\\nrf_fstorage.c"
#line 1 "C:\\Program Files (x86)\\IAR Systems\\Embedded Workbench 8.0\\arm\\inc\\c\\stddef.h"
 
 




  #pragma system_include


#line 1 "C:\\Program Files (x86)\\IAR Systems\\Embedded Workbench 8.0\\arm\\inc\\c\\ycheck.h"
 
 

 


  #pragma system_include















 





#line 11 "C:\\Program Files (x86)\\IAR Systems\\Embedded Workbench 8.0\\arm\\inc\\c\\stddef.h"
#line 1 "C:\\Program Files (x86)\\IAR Systems\\Embedded Workbench 8.0\\arm\\inc\\c\\ysizet.h"
 
 





  #pragma system_include


#line 1 "C:\\Program Files (x86)\\IAR Systems\\Embedded Workbench 8.0\\arm\\inc\\c\\ycheck.h"
 
 

 


  #pragma system_include















 





#line 12 "C:\\Program Files (x86)\\IAR Systems\\Embedded Workbench 8.0\\arm\\inc\\c\\ysizet.h"


 



  typedef _Sizet size_t;




typedef unsigned int __data_size_t;




#line 13 "C:\\Program Files (x86)\\IAR Systems\\Embedded Workbench 8.0\\arm\\inc\\c\\stddef.h"

 








 



  typedef   signed int ptrdiff_t;




  typedef   _Wchart wchar_t;









    typedef union
    {
      long long _ll;
      long double _ld;
      void *_vp;
    } _Max_align_t;
    typedef _Max_align_t max_align_t;



#line 58 "C:\\Program Files (x86)\\IAR Systems\\Embedded Workbench 8.0\\arm\\inc\\c\\stddef.h"






 
#line 46 "C:\\nRF5_SDK_14.2.0_17b948a\\components\\libraries\\fstorage\\nrf_fstorage.c"





 
_Pragma("section = \"fs_data\"");;

static _Bool addr_within_bounds(nrf_fstorage_t const * p_fs, uint32_t addr, uint32_t len);
static _Bool addr_is_aligned32(uint32_t addr);


ret_code_t nrf_fstorage_init(nrf_fstorage_t     * p_fs,
                             nrf_fstorage_api_t * p_api,
                             void               * p_param)
{
    if ((p_fs == 0) || (p_api == 0))
    {
        return ((0x0) + 14);
    }

    p_fs->p_api = p_api;

    return (p_fs->p_api)->init(p_fs, p_param);
}


ret_code_t nrf_fstorage_uninit(nrf_fstorage_t * p_fs,
                               void           * p_param)
{
    ret_code_t rc;

    if (p_fs == 0)
    {
        return ((0x0) + 14);
    }

    if (p_fs->p_api == 0)
    {
        return ((0x0) + 8);
    }

    rc = (p_fs->p_api)->uninit(p_fs, p_param);

     
    p_fs->p_api        = 0;
    p_fs->p_flash_info = 0;

    return rc;
}


ret_code_t nrf_fstorage_read(nrf_fstorage_t const * p_fs,
                             uint32_t               src,
                             void                 * p_dest,
                             uint32_t               len)
{
    if ((p_fs == 0) || (p_dest == 0))
    {
        return ((0x0) + 14);
    }

    if (p_fs->p_api == 0)
    {
        return ((0x0) + 8);
    }

    if (len == 0)
    {
        return ((0x0) + 9);
    }

     
    if (    !addr_is_aligned32(src)
        ||  !addr_within_bounds(p_fs, src, len))
    {
        return ((0x0) + 16);
    }

    return (p_fs->p_api)->read(p_fs, src, p_dest, len);
}


ret_code_t nrf_fstorage_write(nrf_fstorage_t const * p_fs,
                              uint32_t               dest,
                              void           const * p_src,
                              uint32_t               len,
                              void                 * p_context)
{
    if ((p_fs == 0) || (p_src == 0))
    {
        return ((0x0) + 14);
    }

    if (p_fs->p_api == 0)
    {
        return ((0x0) + 8);
    }

     
    if ((len == 0) || ((len % p_fs->p_flash_info->program_unit) != 0))
    {
        return ((0x0) + 9);
    }

     
    if (    !addr_is_aligned32(dest)
        ||  !addr_is_aligned32((uint32_t)p_src)
        ||  !addr_within_bounds(p_fs, dest, len))
    {
        return ((0x0) + 16);
    }

    return (p_fs->p_api)->write(p_fs, dest, p_src, len, p_context);
}


ret_code_t nrf_fstorage_erase(nrf_fstorage_t const * p_fs,
                              uint32_t               page_addr,
                              uint32_t               len,
                              void                 * p_context)
{
    if (p_fs == 0)
    {
        return ((0x0) + 14);
    }

    if (p_fs->p_api == 0)
    {
        return ((0x0) + 8);
    }

    if (len == 0)
    {
        return ((0x0) + 9);
    }

     
    if (    ((page_addr & (p_fs->p_flash_info->erase_unit - 1)) != 0)
        ||  !addr_within_bounds(p_fs, page_addr, (len * p_fs->p_flash_info->erase_unit)))
    {
        return ((0x0) + 16);
    }

    return (p_fs->p_api)->erase(p_fs, page_addr, len, p_context);
}


uint8_t const * nrf_fstorage_rmap(nrf_fstorage_t const * p_fs, uint32_t addr)
{
    if (p_fs == 0)
    {
        return 0;
    }

    return (p_fs->p_api)->rmap(p_fs, addr);
}


uint8_t * nrf_fstorage_wmap(nrf_fstorage_t const * p_fs, uint32_t addr)
{
    if (p_fs == 0)
    {
        return 0;
    }

    return (p_fs->p_api)->wmap(p_fs, addr);
}


_Bool nrf_fstorage_is_busy(nrf_fstorage_t const * p_fs)
{
    
 
    if ((p_fs == 0) || (p_fs->p_api == 0))
    {
        for (uint32_t i = 0; i < ((size_t)__section_end("fs_data") - (size_t)__section_begin("fs_data")) / sizeof(nrf_fstorage_t); i++)
        {
            p_fs  = ((nrf_fstorage_t*)__section_begin("fs_data") + ((i)));    
            if (p_fs->p_api != 0)
            {
                 
                if (p_fs->p_api->is_busy(p_fs))
                {
                    return 1;
                }
            }
        }

        return 0;
    }

    return p_fs->p_api->is_busy(p_fs);
}


static _Bool addr_within_bounds(nrf_fstorage_t const * p_fs,
                               uint32_t               addr,
                               uint32_t               len)
{
    return ((addr           >= p_fs->start_addr) &&
            (addr + len - 1 <= p_fs->end_addr));
}


static _Bool addr_is_aligned32(uint32_t addr)
{
    return !(addr & 0x03);
}


